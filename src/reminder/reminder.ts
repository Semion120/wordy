import 'module-alias/register'

import { DocumentType } from '@typegoose/typegoose'
import { Step, TodoModel } from '@/models/Todo'
import { User, UserModel } from '@/models/User'
import { scheduleJob } from 'node-schedule'
import { sendRemindWord } from '@/reminder/sendRemindWord'
import bot from '@/helpers/bot'
import startMongo from '@/helpers/startMongo'
import todayMSK from '@/helpers/todayMSK'

startMongo()
  .then(() => {
    scheduleJob('*/15 * * * *', checkBD)
  })
  .catch((err) => {
    console.log(err)
  })

let checkTime = 0
async function checkBD() {
  checkTime += 1
  console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–î –Ω–æ–º–µ—Ä: ' + checkTime)
  const today = todayMSK()
  const todos = await TodoModel.find({ remindTime: { $lte: today } })
  let user: DocumentType<User> | null = null
  if (todos) {
    for (const todo of todos) {
      if (user && user.telegramId == todo.telegramId) {
        if (user.todos && user.todos.length > 0) {
          const todoId: string = todo._id.toString()
          const checkTodo = user.todos
            .map((i) => {
              if (i) {
                return i.toString()
              }
            })
            .includes(todoId)
          if (!checkTodo) {
            user.todos?.push(todo)
            await user.save()
          }
        } else if (user.todos && user.todos.length == 0) {
          user.todos?.push(todo)
          await user.save()
        }
      } else {
        user = await UserModel.findOne({ telegramId: todo.telegramId })
        if (!user) {
          throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω —é–∑–µ—Ä –≤ reminder')
        }
        const todoId: string = todo._id.toString()
        if (!user.todoOnCheck) {
          user.todoOnCheck = todo
          await user.save()
          await sendRemindWord(todo)
        } else if (
          !(
            user.todos &&
            user?.todos
              .map((i) => {
                if (i) {
                  return i.toString()
                }
              })
              .includes(todoId)
          ) &&
          user.todoOnCheck.toString() !== todoId
        ) {
          user?.todos?.push(todo)
          await user.save()
        }
      }
    }
  }

  const minutes20Todos = await TodoModel.find({
    step: Step.minutes20,
    remindTime: { $lte: today },
  })
  const usersIds: number[] = []
  if (minutes20Todos) {
    for (const oneTodo of minutes20Todos) {
      if (!usersIds.includes(oneTodo.telegramId)) {
        usersIds.push(oneTodo.telegramId)
      }
    }
  }
  if (usersIds[0]) {
    for (const userId of usersIds) {
      const user = await UserModel.findOne({ telegramId: userId })
      if (!user) {
        throw new Error('–ù–µ —É–¥–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ —é–∑–µ—Ä–∞ –≤ –æ—Ç–ø—Ä–∞–≤–∫–µ 20-—Ç–∏ –º–∏–Ω—É—Ç–æ–∫')
      }
      const userTodoOnCheck = await TodoModel.findById(user.todoOnCheck)
      if (!userTodoOnCheck) {
        throw new Error('–ù–µ —É–¥–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ ToDo –≤ –æ—Ç–ø—Ä–∞–≤–∫–µ 20-—Ç–∏ –º–∏–Ω—É—Ç–æ–∫')
      }
      if (userTodoOnCheck.step != Step.minutes20) {
        await sendRemindWord(userTodoOnCheck)
      }
    }
  }

  // Check usersToLearn
  const usersToLearn = await UserModel.find({
    nextRemindForLearn: { $lte: today },
  })

  if (usersToLearn) {
    for (const user of usersToLearn) {
      await user.setRemindForLearn(true)
      let text
      if (user.lostDaysForLearn && user.lostDaysForLearn >= 3) {
        text = `–ü—Ä–∏–≤–µ—Ç –≥–æ—Ä–µ–º—ã–∫–∞üòÅ, —Ç—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª –±–æ–ª–µ–µ ${
          user.lostDaysForLearn
        } –¥–Ω–µ–π. –ó–∞ —ç—Ç–æ –≤—Ä–µ–º—è —Ç—ã –º–æ–≥ –≤—ã—É—á–∏—Ç—å ${user.lostDaysForLearn * 5}-${
          user.lostDaysForLearn * 15
        } —Å–ª–æ–≤. –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ /learn, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –∫–∞–∫ –≤—Å–µ–≥–¥–∞.`
      } else {
        text =
          '–ü—Ä–∏–≤–µ—Ç! –¢—ã –Ω–µ —É—á–∏–ª –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ –±–æ–ª—å—à–µ 24 —á–∞—Å–æ–≤! –†–µ–∫–æ–º–µ–Ω–¥—É—é –∫–æ–º–∞–Ω–¥—É /learn.'
      }
      await bot.api.sendMessage(user.telegramId, text, {
        parse_mode: 'HTML',
      })
      await user.save()
    }
  }

  // Check usersToCheck
  const usersToCheck = await UserModel.find({
    nextRemindForCheck: { $lte: today },
  })

  if (usersToCheck) {
    for (const user of usersToCheck) {
      const text =
        '–ü—Ä–∏–≤–µ—Ç! –¢—ã –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–ª —Å–ª–æ–≤–∞ —É–∂–µ –±–æ–ª–µ–µ 2 –¥–Ω–µ–π! –†–µ–∫–æ–º–µ–Ω–¥—É—é –∫–æ–º–∞–Ω–¥—É /check.'
      await bot.api.sendMessage(user.telegramId, text, {
        parse_mode: 'HTML',
      })
      await user.setRemindForCheck()
      await user.save()
    }
  }

  console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–î –æ–∫–æ–Ω—á–µ–Ω–∞')
}
